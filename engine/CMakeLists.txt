cmake_minimum_required(VERSION 3.10)

project(ABQ-LLM LANGUAGES CXX)

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin/${PLATFORM_ABI})

set(CXX_STD "17" CACHE STRING "C++ standard")
set(CMAKE_CXX_STANDARD "${CXX_STD}")
set(CMAKE_CXX_STANDARD_REQUIRED ON)
# setting comman compiler flags
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif ()
message("CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")

set(CMAKE_C_FLAGS    "${CMAKE_C_FLAGS}")
set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -std=c++17")
set(CMAKE_C_FLAGS_DEBUG    "${CMAKE_C_FLAGS_DEBUG}  -g -O0")
set(CMAKE_CXX_FLAGS_DEBUG  "${CMAKE_CXX_FLAGS_DEBUG} -g -O0")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
if (MSVC)
    set(CMAKE_C_FLAGS    "${CMAKE_C_FLAGS}    -w")
    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS}  -w")
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -w")
endif()

## set common include directories 
set(COMMON_HEADER_DIRS
  ${PROJECT_SOURCE_DIR}
)

include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/CUDA.cmake)

if (CUDA_VERSION VERSION_LESS 11.0)
    add_definitions("-DENABLE_BF16")
    message("CUDA_VERSION ${CUDA_VERSION} is greater or equal than 11.0, enable -DENABLE_BF16 flag")
endif()
option(ENABLE_FP8 "ENABLE_FP8" OFF)

option(ENABLE_W2A2 "ENABLE_W2A2" OFF)
option(ENABLE_W2A4 "ENABLE_W2A4" OFF)
option(ENABLE_W2A6 "ENABLE_W2A6" OFF)
option(ENABLE_W2A8 "ENABLE_W2A8" OFF)
option(ENABLE_W3A3 "ENABLE_W3A3" OFF)
option(ENABLE_W3A3 "ENABLE_W3A8" OFF)
option(ENABLE_W4A4 "ENABLE_W4A4" OFF)
option(ENABLE_W4A8 "ENABLE_W4A8" OFF)
option(ENABLE_W5A5 "ENABLE_W5A5" OFF)
option(ENABLE_W6A6 "ENABLE_W6A6" OFF)
option(ENABLE_W7A7 "ENABLE_W7A7" OFF)
option(ENABLE_W8A8 "ENABLE_W8A8" OFF)

if(ENABLE_W2A2)
    add_definitions("-DW2A2")
endif()
if(ENABLE_W2A4)
    add_definitions("-DW2A4")
endif()
if(ENABLE_W2A6)
    add_definitions("-DW2A6")
endif()
if(ENABLE_W2A8)
    add_definitions("-DW2A8")
endif()
if(ENABLE_W3A3)
    add_definitions("-DW3A3")
endif()
if(ENABLE_W3A8)
    add_definitions("-DW3A8")
endif()
if(ENABLE_W4A4)
    add_definitions("-DW4A4")
endif()
if(ENABLE_W4A8)
    add_definitions("-DW4A8")
endif()
if(ENABLE_W5A5)
    add_definitions("-DW5A5")
endif()
if(ENABLE_W6A6)
    add_definitions("-DW6A6")
endif()
if(ENABLE_W7A7)
    add_definitions("-DW7A7")
endif()
if(ENABLE_W8A8)
    add_definitions("-DW8A8")
endif()


set(CUTLASS_HEADER_DIR ${PROJECT_SOURCE_DIR}/../3rdparty/cutlass/include)
list(APPEND CUTLASS_HEADER_DIR ${PROJECT_SOURCE_DIR}/../3rdparty/cutlass/tools/util/include)


# setting nvcc compiler flags
set(SM_SETS 75 80 86 89 90)
set(USING_WMMA False)
set(FIND_SM False)
set(FIND_SM_80 False)
set(FIND_SM_75 False)
foreach(SM_NUM IN LISTS SM_SETS)
    string(FIND "${SM}" "${SM_NUM}" SM_POS)
    if(SM_POS GREATER -1)
        set(FIND_SM True)
        set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -gencode=arch=compute_${SM_NUM},code=\\\"sm_${SM_NUM},compute_${SM_NUM}\\\"")
        if (SM_NUM STREQUAL 75 OR SM_NUM STREQUAL 80 OR SM_NUM STREQUAL 86 OR SM_NUM STREQUAL 89 OR SM_NUM STREQUAL 90)
            set(USING_WMMA True)        
        endif()
        if (SM_NUM STREQUAL 75)
            set(FIND_SM_75 True)        
        endif()
        if (SM_NUM STREQUAL 80 OR SM_NUM STREQUAL 86 OR SM_NUM STREQUAL 89 OR SM_NUM STREQUAL 90)
            set(FIND_SM_80 True)        
        endif()
        list(APPEND CMAKE_CUDA_ARCHITECTURES ${SM_NUM})
        message("-- Assign GPU architecture (sm=${SM_NUM})")
    endif()
endforeach()
if(USING_WMMA STREQUAL True)
    set(CMAKE_C_FLAGS    "${CMAKE_C_FLAGS}    -DWMMA")
    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS}  -DWMMA")
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -DWMMA")
    message("-- Use WMMA")
endif()

if(FIND_SM_80 STREQUAL True)
    add_definitions(-DGPU_ARCH=80)
else()
    if(FIND_SM_75 STREQUAL True)
        add_definitions(-DGPU_ARCH=75)
    endif()
endif()

if(NOT (FIND_SM STREQUAL True))
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS}  \
                        -gencode=arch=compute_75,code=\\\"sm_75,compute_75\\\" \
                        -gencode=arch=compute_80,code=\\\"sm_80,compute_80\\\" \
                        -gencode=arch=compute_86,code=\\\"sm_86,compute_86\\\" \
                        -gencode=arch=compute_89,code=\\\"sm_86,compute_89\\\" \
                        ")
    set(CMAKE_C_FLAGS    "${CMAKE_C_FLAGS}    -DWMMA")
    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS}  -DWMMA")
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -DWMMA")
    set(CMAKE_CUDA_ARCHITECTURES 75 80 86 89)
    message("-- Assign GPU architecture (sm=75,80,86,89)")
endif()

set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} --expt-extended-lambda")
set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} --expt-relaxed-constexpr")
set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} --std=c++${CXX_STD}") # -DCUDA_PTX_FP8_F2FP_ENABLED
set(CMAKE_CUDA_FLAGS_RELEASE "${CMAKE_CUDA_FLAGS_RELEASE} -Xcompiler -O2")
set(CMAKE_CUDA_FLAGS_DEBUG "${CMAKE_CUDA_FLAGS_DEBUG} -Xcompiler -O0 -G")
if(BUILD_FAST_MATH)
    set(CMAKE_CUDA_FLAGS_RELEASE "${CMAKE_CUDA_FLAGS_RELEASE} --use_fast_math")
endif()
# print compile flgs
message("CMAKE_CUDA_FLAGS: ${CMAKE_CUDA_FLAGS}")
message("CMAKE_CUDA_FLAGS_DEBUG: ${CMAKE_CUDA_FLAGS_DEBUG}")
message("CMAKE_CUDA_FLAGS_RELEASE: ${CMAKE_CUDA_FLAGS_RELEASE}")

# cuda backend header dirs and libs append
list(APPEND COMMON_HEADER_DIRS ${CUDA_PATH}/include)
list(APPEND COMMON_HEADER_DIRS ${CUTLASS_HEADER_DIR})
list(APPEND COMMON_LIB_DIRS ${CUDA_PATH}/lib/x64)

# Add header files and library dependencies
include_directories(
  ${COMMON_HEADER_DIRS}
)
link_directories(
  ${COMMON_LIB_DIRS}
)

set(WMMA_FILES "" CACHE INTERNAL "wmma files")
file(GLOB WMMA_FILES ${WMMA_FILES} ./common/*.cu)
file(GLOB WMMA_FILES ${WMMA_FILES} ./wmma_any/*.cu)
file(GLOB WMMA_FILES ${WMMA_FILES} ./mma_any/*wmma*.cu)
file(GLOB WMMA_FILES ${WMMA_FILES} ./mma_any/aq_wmma_impl/*.cu)
add_library(wmma_op STATIC ${WMMA_FILES})
set_property(TARGET wmma_op PROPERTY POSITION_INDEPENDENT_CODE  ON)
set_property(TARGET wmma_op PROPERTY CUDA_RESOLVE_DEVICE_SYMBOLS  ON)
target_link_libraries(wmma_op PUBLIC -lcudart)

set(MMA_FILES "" CACHE INTERNAL "mma files")
file(GLOB MMA_FILES ${MMA_FILES} ./common/*.cu)
file(GLOB MMA_FILES ${MMA_FILES} ./wmma_any/*.cu)
file(GLOB MMA_FILES ${MMA_FILES} ./mma_any/*bmma*.cu)
file(GLOB MMA_FILES ${MMA_FILES} ./mma_any/aq_bmma_impl/*.cu)
add_library(mma_op STATIC ${MMA_FILES})
set_property(TARGET mma_op PROPERTY POSITION_INDEPENDENT_CODE  ON)
set_property(TARGET mma_op PROPERTY CUDA_RESOLVE_DEVICE_SYMBOLS  ON)
target_link_libraries(mma_op PUBLIC -lcudart)

set(CUTE_FILES "" CACHE INTERNAL "cute files")
file(GLOB CUTE_FILES ${CUTE_FILES} ./common/*.cu)
file(GLOB CUTE_FILES ${CUTE_FILES} ./wmma_any/*.cu)
file(GLOB CUTE_FILES ${CUTE_FILES} ./mma_any/*cute*.cu)
file(GLOB CUTE_FILES ${CUTE_FILES} ./mma_any/aq_cute_impl/*.cu)
add_library(cute_op STATIC ${CUTE_FILES})

set_property(TARGET cute_op PROPERTY POSITION_INDEPENDENT_CODE  ON)
set_property(TARGET cute_op PROPERTY CUDA_RESOLVE_DEVICE_SYMBOLS  ON)
target_link_libraries(cute_op PUBLIC -lcudart)

file(GLOB TEST_WMMA_FILES ${TEST_WMMA_FILES} ./test/test_wmma/*.cu)
add_library(test_wmma STATIC ${TEST_WMMA_FILES})
set_property(TARGET test_wmma PROPERTY POSITION_INDEPENDENT_CODE  ON)
set_property(TARGET test_wmma PROPERTY CUDA_RESOLVE_DEVICE_SYMBOLS  ON)
target_link_libraries(test_wmma PUBLIC -lcudart wmma_op)

file(GLOB TEST_MMA_FILES ${TEST_MMA_FILES} ./test/test_mma/*.cu)
add_library(test_mma STATIC ${TEST_MMA_FILES})
set_property(TARGET test_mma PROPERTY POSITION_INDEPENDENT_CODE  ON)
set_property(TARGET test_mma PROPERTY CUDA_RESOLVE_DEVICE_SYMBOLS  ON)
target_link_libraries(test_mma PUBLIC -lcudart mma_op)

file(GLOB TEST_CUTE_FILES ${TEST_CUTE_FILES} ./test/test_cute/*.cu)
add_library(test_cute STATIC ${TEST_CUTE_FILES})
set_property(TARGET test_cute PROPERTY POSITION_INDEPENDENT_CODE  ON)
set_property(TARGET test_cute PROPERTY CUDA_RESOLVE_DEVICE_SYMBOLS  ON)
target_link_libraries(test_cute PUBLIC -lcudart cute_op)

add_executable(test_w4a4_int_wmma test_w4a4_int_wmma.cu)
target_link_libraries(test_w4a4_int_wmma wmma_op)
add_executable(test_w4a4_uint_wmma test_w4a4_uint_wmma.cu)
target_link_libraries(test_w4a4_uint_wmma wmma_op)
add_executable(test_any_wmma test_any_wmma.cu)
target_link_libraries(test_any_wmma wmma_op test_wmma)
add_executable(test_any_mma test_any_mma.cu)
target_link_libraries(test_any_mma mma_op test_mma)
add_executable(test_any_cute test_any_cute.cu)
target_link_libraries(test_any_cute cute_op test_cute)
add_executable(gen_layout gen_layout.cpp)
add_executable(gen_kernel gen_kernel.cpp)